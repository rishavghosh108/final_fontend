{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./authorization.service\";\nexport class ApiServiceService {\n  setSidebar(value) {\n    this._sidebar.next(value);\n  }\n  composePanel(value) {\n    this._compose.next(value);\n  }\n  constructor(http, auth) {\n    this.http = http;\n    this.auth = auth;\n    this.email = \"\";\n    this.name = \"\";\n    this.otptoken = '';\n    this.compose = false;\n    this._sidebar = new BehaviorSubject(true);\n    this.sidebar = this._sidebar.asObservable();\n    this._compose = new BehaviorSubject(false);\n    this.composemail = this._compose.asObservable();\n    this.url = \"https://final-backend-ky0r.onrender.com\";\n    // private url: string = \"http://192.168.1.101:7755\";\n    this.checkmobileurl = this.url + \"/system/mobile\";\n    this.checkemailurl = this.url + \"/system/email\";\n    this.signupurl = this.url + \"/system/signup\";\n    this.otpverifyurl = this.url + \"/system/otpverify\";\n    this.loginurl = this.url + \"/system/login\";\n    this.profileurl = this.url + \"/system/profile\";\n    this.forgeturl = this.url + \"/system/forget\";\n    this.inboxurl = this.url + \"/inbox\";\n    this.spamurl = this.url + \"/spam\";\n  }\n  Mobile(body) {\n    return this.http.post(this.checkmobileurl, body, {\n      observe: 'response'\n    });\n  }\n  Email(body) {\n    return this.http.post(this.checkemailurl, body, {\n      observe: 'response'\n    });\n  }\n  Signup(body) {\n    return this.http.post(this.signupurl, body, {\n      observe: 'response'\n    });\n  }\n  Verification(body, headers = new HttpHeaders({\n    \"otpverify\": this.otptoken\n  })) {\n    return this.http.post(this.otpverifyurl, body, {\n      headers,\n      observe: 'response'\n    });\n  }\n  Login(body) {\n    return this.http.post(this.loginurl, body, {\n      observe: 'response'\n    });\n  }\n  Profile(body = {\n    \"request\": \"profile\"\n  }, headers = new HttpHeaders({\n    \"auth\": this.auth.GetToken()\n  })) {\n    return this.http.post(this.profileurl, body, {\n      headers,\n      observe: 'response'\n    });\n  }\n  Forget(body) {\n    return this.http.post(this.forgeturl, body, {\n      observe: 'response'\n    });\n  }\n  Inbox(headers = new HttpHeaders({\n    \"auth\": this.auth.GetToken()\n  })) {\n    return this.http.get(this.inboxurl, {\n      headers,\n      observe: 'response'\n    });\n  }\n  Spam(headers = new HttpHeaders({\n    \"auth\": this.auth.GetToken()\n  })) {\n    return this.http.get(this.spamurl, {\n      headers,\n      observe: 'response'\n    });\n  }\n  static #_ = this.ɵfac = function ApiServiceService_Factory(t) {\n    return new (t || ApiServiceService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.AuthorizationService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ApiServiceService,\n    factory: ApiServiceService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["HttpHeaders","BehaviorSubject","ApiServiceService","setSidebar","value","_sidebar","next","composePanel","_compose","constructor","http","auth","email","name","otptoken","compose","sidebar","asObservable","composemail","url","checkmobileurl","checkemailurl","signupurl","otpverifyurl","loginurl","profileurl","forgeturl","inboxurl","spamurl","Mobile","body","post","observe","Email","Signup","Verification","headers","Login","Profile","GetToken","Forget","Inbox","get","Spam","_","i0","ɵɵinject","i1","HttpClient","i2","AuthorizationService","_2","factory","ɵfac","providedIn"],"sources":["/Users/rishav/Desktop/mail/final_fontend/src/app/services/api-service.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http'\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { AuthorizationService } from './authorization.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ApiServiceService {\n\n  email=\"\"\n  name=\"\"\n\n  otptoken: string = ''\n\n  compose:boolean=false;\n\n  private _sidebar = new BehaviorSubject<boolean>(true);\n  sidebar = this._sidebar.asObservable();\n\n  setSidebar(value: boolean) {\n    this._sidebar.next(value);\n  }\n\n  private _compose = new BehaviorSubject<boolean>(false);\n  composemail = this._compose.asObservable();\n\n  composePanel(value: boolean) {\n    this._compose.next(value);\n  }\n\n  private url: String = \"https://final-backend-ky0r.onrender.com\"\n  // private url: string = \"http://192.168.1.101:7755\";\n  \n  private checkmobileurl = this.url + \"/system/mobile\";\n  private checkemailurl = this.url + \"/system/email\";\n  private signupurl = this.url + \"/system/signup\";\n  private otpverifyurl = this.url + \"/system/otpverify\";\n  private loginurl = this.url + \"/system/login\"\n  private profileurl = this.url + \"/system/profile\"\n  private forgeturl=this.url+ \"/system/forget\"\n\n  private inboxurl=this.url+ \"/inbox\"\n  private spamurl=this.url+ \"/spam\"\n\n  constructor(private http: HttpClient, private auth: AuthorizationService) { }\n\n  Mobile(body: any): Observable<any> {\n    return this.http.post<any>(this.checkmobileurl, body, { observe: 'response' });\n  }\n\n  Email(body: any): Observable<any> {\n    return this.http.post<any>(this.checkemailurl, body, { observe: 'response' });\n  }\n\n  Signup(body: any): Observable<any> {\n    return this.http.post<any>(this.signupurl, body, { observe: 'response' })\n  }\n\n  Verification(body: any, headers = new HttpHeaders({ \"otpverify\": this.otptoken })): Observable<any> {\n    return this.http.post<any>(this.otpverifyurl, body, { headers, observe: 'response' })\n  }\n\n  Login(body: any): Observable<any> {\n    return this.http.post<any>(this.loginurl, body, { observe: 'response' })\n  }\n\n  Profile(body: any = { \"request\": \"profile\" }, headers = new HttpHeaders({ \"auth\": this.auth.GetToken() })): Observable<any> {\n    return this.http.post<any>(this.profileurl, body, { headers, observe: 'response' })\n  }\n\n  Forget(body: any): Observable<any> {\n    return this.http.post<any>(this.forgeturl, body, { observe: 'response' })\n  }\n\n  Inbox(headers = new HttpHeaders({\"auth\": this.auth.GetToken()})):Observable<any>{\n    return this.http.get<any>(this.inboxurl, { headers, observe: 'response'})\n  }\n\n  Spam(headers = new HttpHeaders({\"auth\": this.auth.GetToken()})):Observable<any>{\n    return this.http.get<any>(this.spamurl, { headers, observe: 'response'})\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}