{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"./authorization.service\";\nexport class AuthenticateService {\n  constructor(router, auth) {\n    this.router = router;\n    this.auth = auth;\n  }\n  canActivate() {\n    if (this.auth.GetToken()) {\n      return true;\n    } else {\n      this.router.navigate(['/login']);\n      return false;\n    }\n  }\n  static #_ = this.ɵfac = function AuthenticateService_Factory(t) {\n    return new (t || AuthenticateService)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.AuthorizationService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthenticateService,\n    factory: AuthenticateService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["AuthenticateService","constructor","router","auth","canActivate","GetToken","navigate","_","i0","ɵɵinject","i1","Router","i2","AuthorizationService","_2","factory","ɵfac","providedIn"],"sources":["/Users/rishav/Desktop/mail/final_fontend/src/app/services/authenticate.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Router, CanActivate } from '@angular/router';\nimport { AuthorizationService } from './authorization.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthenticateService {\n\n  constructor(private router: Router, private auth: AuthorizationService) { }\n\n  canActivate():boolean{\n    if (this.auth.GetToken()){\n      return true\n    }else{\n      this.router.navigate(['/login'])\n      return false\n    }\n  }\n}\n"],"mappings":";;;AAOA,OAAM,MAAOA,mBAAmB;EAE9BC,YAAoBC,MAAc,EAAUC,IAA0B;IAAlD,KAAAD,MAAM,GAANA,MAAM;IAAkB,KAAAC,IAAI,GAAJA,IAAI;EAA0B;EAE1EC,WAAWA,CAAA;IACT,IAAI,IAAI,CAACD,IAAI,CAACE,QAAQ,EAAE,EAAC;MACvB,OAAO,IAAI;KACZ,MAAI;MACH,IAAI,CAACH,MAAM,CAACI,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;MAChC,OAAO,KAAK;;EAEhB;EAAC,QAAAC,CAAA,G;qBAXUP,mBAAmB,EAAAQ,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,MAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,oBAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAnBd,mBAAmB;IAAAe,OAAA,EAAnBf,mBAAmB,CAAAgB,IAAA;IAAAC,UAAA,EAFlB;EAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}